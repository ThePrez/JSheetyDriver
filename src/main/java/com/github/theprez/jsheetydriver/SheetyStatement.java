package com.github.theprez.jsheetydriver;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class SheetyStatement implements Statement {
    Statement m_wrp;

    public SheetyStatement(final Statement _stmt) {
        m_wrp = _stmt;
    }

    @Override
    public void addBatch(final String sql) throws SQLException {
        m_wrp.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        m_wrp.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        m_wrp.clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException {
        m_wrp.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        m_wrp.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        m_wrp.closeOnCompletion();
    }

    @Override
    public boolean execute(final String _sql) throws SQLException {
        final ExtraSheetyStatement please = getPleaseStmt(_sql);
        if (null == please) {
            return m_wrp.execute(_sql);
        }
        return please.execute();
    }

    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        return m_wrp.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        return m_wrp.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        return m_wrp.execute(sql, columnNames);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return m_wrp.executeBatch();
    }

    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        return m_wrp.executeQuery(sql);
    }

    @Override
    public int executeUpdate(final String sql) throws SQLException {
        return m_wrp.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        return m_wrp.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
        return m_wrp.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
        return m_wrp.executeUpdate(sql, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return m_wrp.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return m_wrp.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return m_wrp.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return m_wrp.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return m_wrp.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return m_wrp.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return m_wrp.getMoreResults();
    }

    @Override
    public boolean getMoreResults(final int current) throws SQLException {
        return m_wrp.getMoreResults();
    }

    private ExtraSheetyStatement getPleaseStmt(final String _sql) {
        if (_sql.toLowerCase().trim().startsWith("sheety")) {
            return new ExtraSheetyStatement(m_wrp, _sql);
        }
        return null;
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return m_wrp.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return m_wrp.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return m_wrp.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return m_wrp.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return m_wrp.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return m_wrp.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return m_wrp.getWarnings();// TODO: ?
    }

    @Override
    public boolean isClosed() throws SQLException {
        return m_wrp.isClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return m_wrp.isCloseOnCompletion();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return m_wrp.isPoolable();
    }

    @Override
    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
        return m_wrp.isWrapperFor(iface);
    }

    @Override
    public void setCursorName(final String name) throws SQLException {
        m_wrp.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(final boolean enable) throws SQLException {
        m_wrp.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(final int direction) throws SQLException {
        m_wrp.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(final int rows) throws SQLException {
        m_wrp.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(final int max) throws SQLException {
        m_wrp.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(final int max) throws SQLException {
        m_wrp.setMaxRows(max);
    }

    @Override
    public void setPoolable(final boolean poolable) throws SQLException {
        m_wrp.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(final int seconds) throws SQLException {
        m_wrp.setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(final Class<T> iface) throws SQLException {
        return m_wrp.unwrap(iface);
    }

}
